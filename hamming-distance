The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, return the Hamming distance between them.

Example 1:

Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       â†‘   â†‘
The above arrows point to positions where the corresponding bits are different.


ANSWER:

Basically you need to find all the 1s in both the numbers - which means you have to do xor (^) and then count the number of 1s.
  -> do x xor y
  -> Find number of 1s - %2 will give you the last digit, shift the bits to the right by 1 ( >>1)
  
  
  class Solution {
    public int hammingDistance(int x, int y) {
        int count = 0;
        int bitXor = x^y;
        while(bitXor>0){
            if(bitXor%2==1){
                count++;
            }
            bitXor = bitXor>>1;
        }
        return count;
    }
}
