Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true


ANSWER:

You can use stacks to find the answer.

class Solution {
    public boolean isValid(String s) {
        Stack<Character> brackets = new Stack();
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(c=='{'||c=='('||c=='['){
                brackets.push(c);
                
            }
            if(c=='}'){
                if(brackets.isEmpty()||brackets.pop()!='{')return false;
            }
            
            if(c==']'){
                if(brackets.isEmpty()||brackets.pop()!='[')return false;
            }
            
            if(c==')'){
                if(brackets.isEmpty()||brackets.pop()!='(')return false;
            }
        }
        if(brackets.isEmpty())return true;
        return false;
    }
}


Smarter approach to add to stack what you want to check when pop like for '{' add '}' to stack

class Solution {
    public boolean isValid(String s) {
        Stack<Character> brackets = new Stack();
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(c=='{'){
                brackets.push('}');                
            }
            else if(c=='('){
                brackets.push(')');                
            }
            else if(c=='['){
                brackets.push(']');                
            }
            else{
                if(brackets.isEmpty()||brackets.pop()!=c)return false;
            }
        }
        if(brackets.isEmpty())return true;
        return false;
    }
}
