
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any path.

Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.


ANSWER:

A Path is a straight 1 to 1 connection from one node to another so for each node you can either choose left or right ( the max of either values and add it to the root value and return it)
Or else the answer might be the current binary tree as a path, which would be left + current + right.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
        maxSum(root);
        return finalMax;
    }
    int finalMax = Integer.MIN_VALUE;
    public int maxSum(TreeNode root){
        if(root==null){
            return 0;
        }
        int sum1 = maxSum(root.right);
        int sum2 = maxSum(root.left);
        int max = sum1+sum2+root.val;
        
        finalMax = Math.max(finalMax,max);
        
        max = Math.max(sum1,sum2)+root.val;
        if(max<0){
            return 0;
        }else{
            return max;
        }
    }
}
