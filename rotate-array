
We have to rotate the elements of the given array k times to the right.



Loop until all elements are processed
        -> Jump k times in loop until you reach the starting point

class Solution {
    public void rotate(int[] nums, int k) {
        
		if(nums.length<2)return;
		k = k%nums.length;
		int count = 0;
		for(int i = 0; count<nums.length; i++){
			int temp = nums[0];
			int j = i;
			do{
				int swap = temp;
				temp = nums[j];
				nums[j] = swap;
				j = (j+k)%nums.length;
				count++;
			}while(j!=i);
			nums[i] = temp;
		}
	
    }
}


Another easier solution :

Original List                   : 1 2 3 4 5 6 7
After reversing all numbers     : 7 6 5 4 3 2 1
After reversing first k numbers : 5 6 7 4 3 2 1
After revering last n-k numbers : 5 6 7 1 2 3 4 --> Result


class Solution {
  public void rotate(int[] nums, int k) {
    k %= nums.length;
    reverse(nums, 0, nums.length - 1);
    reverse(nums, 0, k - 1);
    reverse(nums, k, nums.length - 1);
  }
  public void reverse(int[] nums, int start, int end) {
    while (start < end) {
      int temp = nums[start];
      nums[start] = nums[end];
      nums[end] = temp;
      start++;
      end--;
    }
  }
}
